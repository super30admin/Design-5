// Solution with extra space

class Solution {
    private HashMap<Node, Node> map;
    public Node copyRandomList(Node head) 
    {
        map = new HashMap<>();
        if(head == null) return null;
        Node deepHead = clone(head);
        Node copyCurr = deepHead;
        Node curr = head;
        while(curr != null)
            
        {
            copyCurr.next = clone(curr.next);
            copyCurr.random = clone(curr.random);
            curr = curr.next;
            copyCurr = copyCurr.next;
        }
        return deepHead;
    }
    
    private Node clone(Node node)
    {
        if(node == null) return null;
        
        if(map.containsKey(node)) 
        {
            return map.get(node);
            
        }
        Node newNode = new Node(node.val);
            
        map.put(node, newNode);
        return newNode;
    }
}
//Space : O(n)
// Time : O(N)
